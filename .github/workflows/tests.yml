name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Typecheck
        run: npm run typecheck

      - name: Build
        run: npm run build

      - name: Run linter
        run: npm run lint
        
      - name: Run tests with coverage
        run: npm run coverage
        
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          
      - name: Check coverage threshold
        run: |
          if [ ! -f "coverage/coverage-summary.json" ]; then
            echo "Converting Vitest coverage to summary format..."
            # Convert coverage/coverage-final.json to summary format if needed
            COVERAGE=$(cat coverage/coverage-final.json | jq -r '[.. | objects | select(.lines?) | .lines.pct] | add / length')
          else
            COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
          fi
          
          if [ -z "$COVERAGE" ] || [ "$COVERAGE" = "null" ]; then
            echo "Failed to extract coverage percentage"
            exit 1
          fi
          
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "Coverage is below 70%: $COVERAGE%"
            exit 1
          else
            echo "Coverage is $COVERAGE%"
          fi
        shell: bash 